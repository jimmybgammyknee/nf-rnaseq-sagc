/*
Main configuration file:
Contains the following sections
	- Shell handling
	- External configuration files to include
	- Parameters
	- Profiles
	- Workflow introspection
	- Manifest
	- Resource requirement function
*/

/*
################################################################################
Shell handling
-e: Exit immediately when command fails
-u: Exit if variable is unset
-o pipefail: prevents piping from causing a non-zero exit status
################################################################################
*/

process.shell = ['/bin/bash', '-euo', 'pipefail']

/*
################################################################################
Pipeline configuration files
################################################################################
*/

includeConfig 'conf/genome.config'
includeConfig 'conf/base.config'

/*
################################################################################
Parameters
################################################################################
*/

params {
	// Help message
	help						= false

	// Main parameters
	library_type				= false // Paired or single
	library_ext					= false // Can be false
	samplesheet					= false // Can be false
	genome						= false // HG38 or GRCH37
	outdir						= 'outdir' // Default outdir name in current dir
	email						= false // Required
	path_bcl					= false // Can remain false if samplesheet provided
	index						= false // single, paired or umi
	umi_ext						= false // Required if 'index = umi'

	// Multiplexed data
	// multiplex					= false
	// barcodes					= false
	
	// Umi specific
	// with_umi					= false
	

	// Optional arguments
	// sabre_optional_args			= false
	fastp_optional_args			= false
	umiadd_optional_args		= false
	umitools_optional_args		= false
	star_optional_args			= false
	featurecounts_optional_args	= false
	fastqc_optional_args		= false

	// SLURM specific: Defaults only, expecting to be overwritten
	max_memory					= 128.GB
	max_cpus					= 16
	max_time					= 120.h
	partition					= false
	node_list					= false
}

/*
################################################################################
Profiles
################################################################################
*/

profiles {
	standard {
		process.executor = 'local'
		executor.queueSize = 10
	}
	slurm {
		executor.name = 'slurm'
		executor.queueSize = 10

		process.executor = 'slurm'
		process.queue = params.partition
		process.clusterOptions = "--mail-user=$params.email --mail-type=FAIL --nodelist=$params.node_list"
	}
	conda {
		process.conda = "$projectDir/lib/conda-new.yml"
		conda.cacheDir = "${HOME}/nf-condaEnv"
	}
}

/*
################################################################################
Workflow introspection
################################################################################
*/

report {
	enabled = true
	file = "${params.outdir}/reports/report.html"
}

timeline {
	enabled = true
	file = "${params.outdir}/reports/timeline.html"
}


dag {
	enabled = true
	file = "${params.outdir}/reports/DAG.svg"
}

trace {
	enabled = true
	fields = 'process,task_id,hash,name,attempt,status,exit,realtime,cpus,memory,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
	file = "${params.outdir}/reports/trace.txt"
}

/*
################################################################################
Check requested resources
################################################################################
*/

def check_resources(val, max){
	// Check CPU value doesn't exceed the node limit 
	if( val instanceof Integer ) {
		try {
		    return Math.min( val, max as int)
		}
		catch( all ) {
		    println "WARNING: Max cpus '${max}' is not valid. Using default value: ${val}"
		    return val
		}
	}
	// Check the memory value does exceed the memory limit
	if(val instanceof nextflow.util.MemoryUnit){
		try{
		    def other = max as nextflow.util.MemoryUnit
		    return val.compareTo(other) == 1 ? other : val
		}
		catch(all){
		    println "WARNING: Max memory '${max}' is not valid. Using default value ${val}"
		    return val
		}
	}
	// Check that the time duration does not exceed walltime limits
	if( val instanceof nextflow.util.Duration ) {
		try {
		    def other = max as nextflow.util.Duration
		    return val.compareTo(other) == 1 ? other : val
		}   
		catch( all ) {
		    println "WARNING: Max time '${max}' is not valid. Using default value: ${val}"
		    return val
		}  
	}
}
